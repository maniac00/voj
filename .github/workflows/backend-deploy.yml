name: Deploy Backend (ECRâ†’ECS)

on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'
      - 'pyproject.toml'
      - 'poetry.lock'

jobs:
  build-and-deploy:
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ap-northeast-2
      ECR_REPO: voj-backend
      ECS_CLUSTER: voj-prod
      ECS_SERVICE: voj-backend-api
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          TAG=sha-$(git rev-parse --short HEAD)
          docker buildx build \
            --platform linux/amd64 \
            -t $ECR_REGISTRY/${{ env.ECR_REPO }}:$TAG \
            -f backend/Dockerfile .
          docker push $ECR_REGISTRY/${{ env.ECR_REPO }}:$TAG
          echo "IMAGE=$ECR_REGISTRY/${{ env.ECR_REPO }}:$TAG" >> $GITHUB_ENV

      - name: Render new task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .github/ecs/taskdef.json
          container-name: api
          image: ${{ env.IMAGE }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true



